import React, { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";
import { motion } from "framer-motion";

const Cart = () => {
    const [cartItems, setCartItems] = useState([]);
    const [error, setError] = useState("");
    const token = localStorage.getItem("token");
    const cusid = localStorage.getItem("cusid");
    const navigate = useNavigate();

    useEffect(() => {
        fetchCartItems();
    }, []);

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    const fetchCartItems = async () => {
        try {
            const response = await axios.get("http://localhost:5000/api/cart/"+cusid, {
                headers: { Authorization: `Bearer ${token}` },
            });
            if (response.data.cart.length > 0) {
                setCartItems(response.data.cart);
            } else {
                setError("‚ùå No items in cart.");
            }
        } catch (err) {
            console.error("‚ùå Fetch Cart Error:", err);
            setError("‚ùå Failed to fetch cart items.");
        }
    };

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô)
    const handleDelete = async (cartID) => {
        if (!window.confirm("‚ö†Ô∏è Are you sure you want to remove this item?")) return;

        try {
            const response = await axios.delete(`http://localhost:5000/api/cart/${cartID}`, {
                headers: { Authorization: `Bearer ${token}` },
            });

            if (response.data.status === "success") {
                alert("‚úÖ Item removed from cart!");
                setCartItems(cartItems.filter(item => item.CartID !== cartID));
            } else {
                setError("‚ùå Failed to remove item.");
            }
        } catch (err) {
            console.error("‚ùå Delete Cart Error:", err);
            setError("‚ùå Error removing item from cart.");
        }
    };

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    const handleRemoveAll = async () => {
        if (!window.confirm("‚ö†Ô∏è Are you sure you want to remove all items from the cart?")) return;

        try {
            const response = await axios.delete("http://localhost:5000/api/cart", {
                headers: { Authorization: `Bearer ${token}` },
            });

            if (response.data.status === "success") {
                alert("‚úÖ All items removed from cart!");
                setCartItems([]); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÉ‡∏´‡πâ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏á
            } else {
                setError("‚ùå Failed to remove all items.");
            }
        } catch (err) {
            console.error("‚ùå Remove All Error:", err);
            setError("‚ùå Error removing all items.");
        }
    };

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Checkout ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô SQL ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    const handleCheckout = async () => {
        if (cartItems.length === 0) {
            alert("‚ùå Your cart is empty!");
            return;
        }

        const totalAmount = cartItems.reduce((total, item) => total + (parseFloat(item.Price) * item.Quantity), 0);
        const customerID = cusid || 1;

        console.log(cartItems);

        const orderData = {
            CustomerID: customerID,
            TotalPrice: totalAmount,
            Status: "Pending",
        };

        try {
            // ‚úÖ 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (Order)
            const orderResponse = await axios.post("http://localhost:5000/api/orders", orderData, {
                headers: { Authorization: `Bearer ${token}` },
            });

            if (orderResponse.data.status === "success") {
                console.log("‚úÖ Order created successfully:", orderResponse.data);

                // ‚úÖ 2. ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (Cart)
                const deleteResponse = await axios.delete("http://localhost:5000/api/cart", {
                    headers: { Authorization: `Bearer ${token}` },
                });

                if (deleteResponse.data.status === "success") {
                    console.log("üõí Cart cleared successfully");
                    setCartItems([]); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
                    alert(`‚úÖ Order placed successfully! Order ID: ${orderResponse.data.OrderID}`);
                    navigate(`/orders?id=${orderResponse.data.OrderID}`);
                } else {
                    alert("‚ùå Failed to clear cart items.");
                }
            } else {
                alert("‚ùå Failed to create order.");
            }
        } catch (err) {
            console.error("‚ùå Checkout Error:", err);
            setError("‚ùå Error during checkout.");
        }
    };

    const getTotalPrice = () => {
        return cartItems.reduce((total, item) => total + (parseFloat(item.Price) * item.Quantity), 0).toLocaleString();
    };

    return (
        <motion.div 
    className="container my-5 p-4 rounded-3 shadow-sm bg-white"
    initial={{ opacity: 0, y: -20 }} 
    animate={{ opacity: 1, y: 0 }} 
    transition={{ duration: 0.5 }}
>
    <h2 className="text-center text-primary fw-bold mb-4">üõí Your Shopping Cart</h2>

    {error && <p className="alert alert-danger text-center">{error}</p>}

    {cartItems.length === 0 ? (
        <p className="text-center text-muted fs-4">Your cart is empty.</p>
    ) : (
        <div className="table-responsive">
            <table className="table table-striped align-middle">
                <thead className="bg-secondary text-white">
                    <tr>
                        <th>CartID</th>
                        <th>ProductID</th>
                        <th>Product Name</th>
                        <th>Price</th>
                        <th>CustomerID</th>
                        <th>Quantity</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    {cartItems.map((item) => (
                        <motion.tr key={item.CartID} whileHover={{ scale: 1.015 }} transition={{ duration: 0.2 }}>
                            <td>{item.CartID}</td>
                            <td>{item.ProductID}</td>
                            <td>{item.ProductName}</td>
                            <td>{parseFloat(item.Price).toLocaleString()} ‡∏ö‡∏≤‡∏ó</td>
                            <td>{item.CustomerID}</td>
                            <td>{item.Quantity}</td>
                            <td>
                                <motion.button 
                                    className="btn btn-outline-danger btn-sm rounded-2"
                                    whileHover={{ scale: 1.05 }}
                                    whileTap={{ scale: 0.95 }}
                                    onClick={() => handleDelete(item.CartID)}
                                >
                                    ‚ùå Remove
                                </motion.button>
                            </td>
                        </motion.tr>
                    ))}
                </tbody>
            </table>
        </div>
    )}

    <h3 className="text-end text-success fw-bold">Total Price: {getTotalPrice()} ‡∏ö‡∏≤‡∏ó</h3>

    <div className="d-flex justify-content-between mt-4">
        {/* ‡∏õ‡∏∏‡πà‡∏° Back to Products */}
        <motion.button 
            className="btn btn-outline-secondary px-4 rounded-2" 
            whileHover={{ scale: 1.05 }}
            onClick={() => navigate("/products")}
        >
            üîô Back to Products
        </motion.button>

        {/* ‡∏õ‡∏∏‡πà‡∏° Remove All */}
        <motion.button 
            className="btn btn-outline-warning px-4 rounded-2"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleRemoveAll}
        >
            üóë Remove All
        </motion.button>

        {/* ‡∏õ‡∏∏‡πà‡∏° Checkout */}
        <motion.button 
            className="btn btn-success px-4 rounded-2 text-white"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleCheckout}
        >
            üí≥ Checkout
        </motion.button>
    </div>
</motion.div>

    );
};

export default Cart;
